@using zixie.Models
@model InstrumentsViewModel

@{
    foreach(Crypto cr in Model.Crypto)
    {
        ViewData["Title"] = cr.Name;
    }
    
}

@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SimpleReportViewModel.Select(x => x.DimensionOne).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SimpleReportViewModel.Select(x => x.Quantity).ToList());
    //var Name = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Crypto.Select(x => x.Name).ToList());
}
<div class="info container-fluid">
    <div class="row">
        <div class="col">
            <a href='javascript:history.go(-1)'><i class="fa fa-angle-left"></i> Back</a>
        </div>
    </div>

<div class="row">
    @foreach (Crypto comp in Model.Crypto)
    {
        var img = @comp.Symbol + ".png";
           <div class="col-xl-8 d-inline-flex">
        <div class="align-self-center p-2">
            <img title="@comp.Name" src="/img/crypto/@img" onerror="this.onerror=null;this.src='/img/stocks/question.jpg';" height="50" width="50"/>
        </div>
        <div class="align-self-center p-2">
            <h1 id="name">@comp.Name</h1>
        </div>
        <div class="align-self-center p-2">
            <span class="info-ticker rounded">@comp.Symbol</span> 
        </div>
    </div>
    <div class="col-xl-4 align-middle p-2">
                <h2>@{
                        
                                    var result = "$";
                                    <div class="info-price-name">
                                        @comp.Name price (@comp.Symbol)
                                    </div>
                                    <div>
                            <label> @result</label>

                            @{

                                var percentage = (comp.PriceYesterday / comp.Price)*100;
                                if (percentage < 100)
                                {
                                    percentage = 100 - percentage;
                                }
                                if (percentage > 100)
                                {
                                    percentage =  percentage - 100;
                                }

                                
                                if (comp.Price < comp.PriceYesterday)
                                {
                                    <label id="price">@comp.Price</label> <label id="percentage" class="text-red text-mini fw-bold">@percentage </label>

                                    <label class="text-mini text-red">%</label>

                                    <img title="@comp.Name" src="/img/other/icon-down.jpg" height="10" width="10" />
                                }
                                if (comp.Price > comp.PriceYesterday)
                                {
                                    <label id="price">@comp.Price</label> <label id="percentage" class="text-green text-mini fw-bold">@percentage </label><label class="text-mini text-green">%</label><img title="@comp.Name" src="/img/other/icon-up.jpg" height="10" width="10" />
                                }
                            }
                                
                            
                                    <div class="info-price-name">
                                        Last update: @comp.Time
                                <label id="priceyesterday" class="visually-hidden">@comp.PriceYesterday</label>
                               
                                    </div>
                                </div>
                    }
                    </h2>
            </div>
    }
</div>
<div class="row">
        <div class="chart-container">
            <canvas id="chart" style="width:100%; height:300px"></canvas>
        </div>
</div>
</div>
<script type="text/javascript">
    $(function () {
        var chartName = "chart";
        var mn = @Html.Raw(ViewData["min"].ToString().Replace(",","."));
        var mn2 = mn-((mn/100)*0.5);
        console.log("mn2: " + mn2);
        var ctx = document.getElementById(chartName).getContext('2d');
        var data = {
            labels: @Html.Raw(XLabels),
            datasets: [{
                label: $("#name").text() + " chart",
                
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderColor: [
                    'rgba(255,99,132,0.5)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(255, 0, 0)',
                    'rgba(0, 255, 0)',
                    'rgba(0, 0, 255)',
                    'rgba(192, 192, 192)',
                    'rgba(255, 255, 0)',
                    'rgba(255, 0, 255)'
                ],
                borderWidth: 1,
                data: @Html.Raw(YValues)
        }]
        };

        var options = {
            maintainAspectRatio: false,
            legend: { display: false },
            PointPrefixedOptions: { pointBorderColor: "rgba(150,50,150,0.2)" },
            pointBorderColor: "rgba(150,50,150,0.2)",
            scales: {

                yAxes: [{

                    ticks: {
                        min: mn2,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true,
                        color: "rgba(255,99,164,0.2)"
                        
                    }
                }],
                xAxes: [{
                    display: false,
                    
                    ticks: {
                        min: 0,
                        beginAtZero: true
                    },
                    gridLines: {
                        display: true
                    }
                }]
            }
        };

        var myChart = new Chart(ctx, {
            options: options,
            data: data,

            type: 'line'

        });
    });
</script> 